@model DrCleanCare.Models.AssignTaskViewModel

@{
    ViewBag.Title = "Nhân sự";
    Layout = "~/Views/Shared/_Admin.cshtml";
}

<div id="page-wrapper" class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <h4 class="page-header form-title text-primary"><i class="fa fa-tasks"></i> @ViewBag.Title</h4>
        </div>
    </div>
    <!-- /.col-lg-12 -->
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-plus-square"></i> Phân công
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm("AssignTask", "Task", FormMethod.Post,
                new
                {
                    @class = "form-horizontal",
                    @enctype = "multipart/form-data"
                }))
                    {
                        <div class="row form-group">
                            <div class="col-lg-12">
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                @Html.HiddenFor(model => model.Id)
                                @Html.Hidden("EmployeeId_Selected", Model.EmployeeId)
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-lg-12">
                                <div class="col-md-3 text-right">
                                    <label class="control-label text-nowrap">Nhân viên</label>
                                </div>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(model => model.EmployeeId, new List<SelectListItem>(), "--Chọn nhân viên--", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EmployeeId)
                                </div>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-lg-12">
                                <div class="col-md-3 text-right">
                                    <label class="control-label text-nowrap">Đầu việc</label>
                                </div>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(model => model.TaskId, new List<SelectListItem>(), "--Chọn công việc--", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.TaskId)
                                </div>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-lg-12">
                                <div class="col-md-3 text-right">
                                    <label class="control-label text-nowrap">Từ thời gian</label>
                                </div>
                                <div class="col-sm-9 form-inline">
                                    <div style="display:table">
                                        <div style="display:table-row">
                                            <div style="display:table-cell">
                                                @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control", @type = "text", @style = "width:100px; margin-right: 8px;" })
                                            </div>
                                            <div style="display:table-cell; padding-left:4px;">
                                                @Html.DropDownListFor(model => model.StartHour, new List<SelectListItem>(), null, new { @class = "form-control" }) :
                                            </div>
                                            <div style="display:table-cell; padding-left:4px;">
                                                @Html.DropDownListFor(model => model.StartMinute, new List<SelectListItem>(), null, new { @class = "form-control" }) 
                                            </div>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.StartDate)
                                </div>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-lg-12">
                                <div class="col-md-3 text-right">
                                    <label class="control-label text-nowrap">Đến thời gian</label>
                                </div>
                                <div class="col-sm-9 form-inline">
                                    <div style="display:table">
                                        <div style="display:table-row">
                                            <div style="display:table-cell">
                                                @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control", @type = "text", @style = "width:100px; margin-right: 8px;" }) 
                                            </div>
                                            <div style="display:table-cell; padding-left:4px;">
                                                @Html.DropDownListFor(model => model.EndHour, new List<SelectListItem>(), null, new { @class = "form-control" }) : 
                                            </div>
                                            <div style="display:table-cell; padding-left:4px;">
                                                @Html.DropDownListFor(model => model.EndMinute, new List<SelectListItem>(), null, new { @class = "form-control" })
                                            </div>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.EndDate)
                                </div>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-lg-12">
                                <div class="col-md-3 text-right">
                                    <label class="control-label text-nowrap">Ghi chú</label>
                                </div>
                                <div class="col-sm-9">
                                    @Html.TextAreaFor(model => model.Note,
                                            new { @class = "form-control", @type = "text" })
                                </div>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-lg-12">
                                <div class="col-md-3 text-right">
                                    <label class="control-label text-nowrap"></label>
                                </div>
                                <div class="col-sm-9">
                                    <input type="submit" value="Lưu" class="btn btn-sm btn-success" style="width:120px;" />
                                    <input id="ResetButton" type="reset" value="Nhập lại" class="btn btn-sm btn-success" style="width:120px;" />
                                    @Html.ActionLink("Trở về", "Index", "Employee", new { @style = "width:120px;", @class = "btn btn-primary btn-sm" })
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="UserAssigmentsSection" class="col-lg-12 text-center">
            <table class="table table-hover table-bordered">
                <tbody>
                    <tr class="alert-success">
                        <th class="text-nowrap text-center">Từ ngày</th>
                        <th class="text-nowrap text-center">Đến ngày</th>
                        <th class="text-nowrap">Công việc</th>
                        <th class="text-nowrap">Nội dung</th>
                        <th class="text-nowrap">Thao tác</th>
                    </tr>
                    <tr class="assignment-row">
                        <td colspan="5" class="text-nowrap text-center text-danger"></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

</div>
@section Styles {
    <link href="~/Content/datepicker.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-dialog.min.css" rel="stylesheet" />
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/bootstrap-datepicker.js"></script>
    <script src="~/Scripts/bootstrap-dialog.min.js"></script>

    <script>

        // data
        var g_TasksListData = [];
        var g_EmployeesListData = [];
        var g_UserAssignments = [];

        // values
        var g_CurrentSelectedEmployeeId = 0;

        // controls
        var g_TaskSelectedOptions = null;
        var g_EmployeesSelectedOptions = null;
        var g_StartHoursSelectOptions = null;
        var g_EndHourSelectOptions = null;
        var g_StartMinSelectedOptions = null;
        var g_EndMinSelectedOptions = null;
        var g_EmployeeInfoText = null;
        var g_ResetButton = null;
        var g_UserAssignmentsTable = null;

        // active employee menu
        $("#menu-employee").attr("class", "active");

        $(document).ready(new function () {

            // get values
            g_CurrentSelectedEmployeeId = document.getElementById("EmployeeId_Selected").value;
            ajaxLoadUserAssigmentsList(g_CurrentSelectedEmployeeId);

            // get controls
            g_TaskSelectedOptions = document.getElementById("TaskId");
            g_EmployeesSelectedOptions = document.getElementById("EmployeeId");
            g_StartHoursSelectOptions = document.getElementById("StartHour");
            g_EndHourSelectOptions = document.getElementById("EndHour");
            g_StartMinSelectedOptions = document.getElementById("StartMinute");
            g_EndMinSelectedOptions = document.getElementById("EndMinute");
            g_EmployeeInfoText = document.getElementById("EmployeeInfo");
            g_ResetButton = document.getElementById("ResetButton");
            g_UserAssignmentsTable = document.getElementById("UserAssigmentsSection");

            // setup datetime picker
            $("#StartDate").datepicker({ format: 'dd/mm/yyyy', todayHighlight: true });
            $('#StartDate').on('changeDate', function (ev) { $(this).datepicker('hide') });

            $("#EndDate").datepicker({ format: 'dd/mm/yyyy', todayHighlight: true });
            $('#EndDate').on('changeDate', function (ev) { $(this).datepicker('hide') });

            // hours/miniutes select options
            for (var i = 0; i < 24; i++) {
                var value = i;
                var text = i < 10 ? "0" + i : i;
                g_StartHoursSelectOptions.options[i] = new Option(text, value, false, i == 7);
                g_EndHourSelectOptions.options[i] = new Option(text, value, false, i == 17);
            }
            for (var i = 0; i < 60; i++) {
                var value = i;
                var text = i < 10 ? "0" + i : i;
                g_StartMinSelectedOptions.options[i] = new Option(text, value, false, i == 30);
                g_EndMinSelectedOptions.options[i] = new Option(text, value, false, i == 0);
            }

            // ajax to load tasks/employees list
            ajaxLoadTasksList();
            ajaxLoadEmployeesList();

            //// event handlers
            g_EmployeesSelectedOptions.onchange = function (e) {
                g_CurrentSelectedEmployeeId = g_EmployeesSelectedOptions.value;

                // clear current employee info
                $(g_EmployeeInfoText).html("");
                $(g_UserAssignmentsTable).html("");

                // display new selected user info
                ajaxLoadUserAssigmentsList(g_CurrentSelectedEmployeeId);
            }

            g_ResetButton.onclick = function (e) {
                resetForm();
            }

        });

        /* Function to load Employees */
        function ajaxLoadEmployeesList() {
            $.ajax({
                url: '/Employee/GetEmployeesList',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.Error == FLAG_SUCCESS) {
                        g_EmployeesListData = data.Employees;
                        displayEmployeesList(g_EmployeesListData);
                    }
                    else {
                        showBootstrapDialog(FLAG_ERROR, 'Lỗi nạp danh sách nhân viên', data.Message);
                    }
                },
                error: function (xhr) {
                    showBootstrapDialog(FLAG_ERROR, 'Lỗi nạp danh sách nhân viên', xhr.responseText);
                }
            });
        }

        /* Function to load Tasks */
        function ajaxLoadTasksList() {
            $.ajax({
                url: '/Task/GetTasksList',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.Error == FLAG_SUCCESS) {
                        g_TasksListData = data.Tasks;
                        displayTasksList(g_TasksListData);
                    }
                    else {
                        showBootstrapDialog(FLAG_ERROR, 'Lỗi nạp danh sách công việc', data.Message);
                    }
                },
                error: function (xhr) {
                    showBootstrapDialog(FLAG_ERROR, 'Lỗi nạp danh sách công việc', xhr.responseText);
                }
            });
        }

        /* Function to load employee's task assigments */
        function ajaxLoadUserAssigmentsList(employeeId) {
            // show loading status
            if (employeeId == undefined || employeeId <= 0) return;

            $.ajax({
                url: '/Task/GetTopEmployeeTasks/?employeeId=' + employeeId + '&top=25',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (data.Error == FLAG_SUCCESS) {
                        g_UserAssignments = data.UserTasks;
                        displayUserAssignments(g_UserAssignments);
                    } else {
                        showBootstrapDialog(FLAG_ERROR, 'Lỗi nạp danh sách phân công', data.Message);
                    }
                },
                error: function (xhr) {
                    showBootstrapDialog(FLAG_ERROR, 'Lỗi nạp danh sách phân công', xhr.responseText);
                }
            });
        }

        /* Function to generate Employee select options */
        function displayEmployeesList(employees) {
            $.each(employees, function (index, employee) {
                if (employee.EmployeeId == g_CurrentSelectedEmployeeId) {
                    // user was selected
                    g_EmployeesSelectedOptions.options[g_EmployeesSelectedOptions.options.length] =
                        new Option(employee.FullName + ' - ' + employee.Phone, employee.EmployeeId, false, true);
                } else {
                    g_EmployeesSelectedOptions.options[g_EmployeesSelectedOptions.options.length] =
                        new Option(employee.FullName + ' - ' + employee.Phone, employee.EmployeeId, false, false);
                }
            });
        }

        /* Function to generate Task select options */
        function displayTasksList(tasks) {
            $.each(tasks, function (index, task) {
                g_TaskSelectedOptions.options[g_TaskSelectedOptions.options.length] =
                    new Option(task.TaskName, task.TaskId, false, false);
            });
        }

        /* Function to display user's task assignments */
        function displayUserAssignments(assignments) {
            var htmlTasksListTable = '';

            // generate tasks assignment table
            htmlTasksListTable += '<table class="table table-hover table-bordered">\r\n';
            htmlTasksListTable += '    <tr class="alert-success">\r\n';
            htmlTasksListTable += '         <th class="text-nowrap">Công việc</th>\r\n';
            htmlTasksListTable += '         <th class="text-nowrap">Nội dung</th>\r\n';
            htmlTasksListTable += '         <th class="text-nowrap text-center">Từ ngày</th>\r\n';
            htmlTasksListTable += '         <th class="text-nowrap text-center">Đến ngày</th>\r\n';
            htmlTasksListTable += '         <th class="text-nowrap">Thao tác</th>\r\n';
            htmlTasksListTable += '    </tr>\r\n';

            var rowCount = 0;
            $.each(assignments, function (index, element) {
                var dateFrom = new Date(parseInt(element.StartTime.substr(6)));
                var dateTo = new Date(parseInt(element.EndTime.substr(6)));
                htmlTasksListTable += '    <tr class="assignment-row">\r\n';
                htmlTasksListTable += '        <td class="text-left">' + element.TaskName + '</td>\r\n';
                if (element.Note == null) element.Note = '';
                htmlTasksListTable += '        <td class="text-left">' + element.Note + '</td>\r\n';
                htmlTasksListTable += '        <td class="text-nowrap text-center">' + formatDateTime(dateFrom) + '</td>\r\n';
                htmlTasksListTable += '        <td class="text-nowrap text-center">' + formatDateTime(dateTo) + '</td>\r\n';
                htmlTasksListTable += '        <td class="text-nowrap">\r\n';
                htmlTasksListTable += '            <a class="btn btn-primary btn-sm" href="/Task/EditAssignment/' + element.Id + '">Sửa</a>\r\n';
                htmlTasksListTable += '            <a href="#" class="btn btn-danger btn-sm" onclick="return deleteAssignment(' + element.Id + ', this, \'' + element.TaskName + '\')">Xóa</a>';
                htmlTasksListTable += '        </td>\r\n';
                htmlTasksListTable += '    </tr>\r\n';

                rowCount++;
            });

            if (rowCount == 0) {
                htmlTasksListTable += '    <tr class="assignment-row">\r\n';
                htmlTasksListTable += '        <td class="text-nowrap text-center text-danger" colspan="5">Chưa có phân công nào</td>\r\n';
                htmlTasksListTable += '    </tr>\r\n';
            }

            htmlTasksListTable += '</table>';

            // show tasks assignment list
            $(g_UserAssignmentsTable).html(htmlTasksListTable);
        }

        /* Function to delete a user task assignment */
        function deleteAssignment(id, element, name) {
            BootstrapDialog.show({
                message: 'Bạn có muốn xóa phân công [' + name + '] không?',
                buttons: [{
                    label: 'Đồng ý xóa',
                    cssClass: 'btn-danger btn-sm',
                    action: function (dialog) {
                        // ajax to delete task assignment
                        $.ajax({
                            url: '/Task/DeleteAssignment/' + id,
                            type: 'POST',
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            success: function (data) {
                                if (data.Error == FLAG_SUCCESS) {
                                    // success
                                    $(element).closest('.assignment-row').remove();
                                } else {
                                    // error
                                    showBootstrapDialog(FLAG_ERROR, 'Xóa phân công', data.Description);
                                }
                            },
                            error: function (xhr) {
                                // ajax error
                                showBootstrapDialog(FLAG_ERROR, 'Xóa phân công', 'Lỗi xảy ra trong quá trình truy cập máy chủ!');
                            }
                        });

                        dialog.close();
                    }
                }, {
                    label: 'Không xóa',
                    cssClass: 'btn-primary btn-sm',
                    action: function (dialog) {
                        dialog.close();
                    }
                }]
            });
        }


        /* Function to reset form */
        function resetForm() {
            g_CurrentSelectedEmployeeId = document.getElementById("EmployeeId_Selected").value;
            if (g_CurrentSelectedEmployeeId > 0) {
                displayEmployeeInfo(g_CurrentSelectedEmployeeId);
            } else {
                g_EmployeeInfoText.innerHTML = "";
                g_UserAssignmentsTable.innerHTML = "";
            }
        }

        /* Function to convert a date to dd/MM/yyyy HH:mm format */
        function formatDateTime(date) {
            var yy = date.getFullYear();
            var mm = date.getMonth() + 1;
            var dd = date.getDate();
            var hh = date.getHours();
            var mi = date.getMinutes();

            var dateFormat =
                (dd < 10 ? '0' + dd : dd + '') + '/' +
                (mm < 10 ? '0' + mm : mm + '') + '/' +
                yy + ' ' +
                (hh < 10 ? '0' + hh : hh + '') + ':' +
                (mi < 10 ? '0' + mi : mi + '');

            return dateFormat;
        }
    </script>
}


